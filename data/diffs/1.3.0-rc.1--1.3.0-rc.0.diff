diff --git config/prod.exs config/prod.exs
index e911c6c..95fb021 100644
--- config/prod.exs
+++ config/prod.exs
@@ -14,7 +14,7 @@ use Mix.Config
 # manifest is generated by the mix phoenix.digest task
 # which you typically run after static files are built.
 config :sample_app, SampleApp.Web.Endpoint,
-  on_init: {SampleApp.Web.Endpoint, :load_from_system_env, []},
+  on_init: {Demo.Web.Endpoint, :load_from_system_env, []},
   url: [host: "example.com", port: 80],
   cache_static_manifest: "priv/static/cache_manifest.json"
 
diff --git mix.exs mix.exs
index ec4b5fa..4a926c8 100644
--- mix.exs
+++ mix.exs
@@ -7,6 +7,7 @@ defmodule SampleApp.Mixfile do
      elixir: "~> 1.4",
      elixirc_paths: elixirc_paths(Mix.env),
      compilers: [:phoenix, :gettext] ++ Mix.compilers,
+     build_embedded: Mix.env == :prod,
      start_permanent: Mix.env == :prod,
      aliases: aliases(),
      deps: deps()]
@@ -17,7 +18,7 @@ defmodule SampleApp.Mixfile do
   # Type `mix help compile.app` for more information.
   def application do
     [mod: {SampleApp.Application, []},
-     extra_applications: [:logger, :runtime_tools]]
+     extra_applications: [:logger]]
   end
 
   # Specifies which paths to compile per environment.
diff --git test/support/data_case.ex test/support/data_case.ex
index ba71255..d409a4c 100644
--- test/support/data_case.ex
+++ test/support/data_case.ex
@@ -36,18 +36,18 @@ defmodule SampleApp.DataCase do
   end
 
   @doc """
-  A helper that transform changeset errors to a map of messages.
+  A helper that converts the changeset error messages
+  for a given field into a list of strings for assertion:
 
-      changeset = Accounts.create_user(%{password: "short"})
-      assert "password is too short" in errors_on(changeset).password
-      assert %{password: ["password is too short"]} = errors_on(changeset)
+      changeset = Blog.create_user(%{password: "short"})
+      assert "password is too short" in errors_on(changeset, :password)
 
   """
-  def errors_on(changeset) do
-    Ecto.Changeset.traverse_errors(changeset, fn {message, opts} ->
+  def errors_on(changeset, field) do
+    for {message, opts} <- Keyword.get_values(changeset.errors, field) do
       Enum.reduce(opts, message, fn {key, value}, acc ->
         String.replace(acc, "%{#{key}}", to_string(value))
       end)
-    end)
+    end
   end
 end
